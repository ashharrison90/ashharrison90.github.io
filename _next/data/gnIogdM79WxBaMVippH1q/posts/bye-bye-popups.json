{"pageProps":{"post":{"content":"<h2>End to end tests are important</h2>\n<p>At the time, we used <a href=\"https://www.cypress.io/\">Cypress</a> for our end-to-end tests. We have a test that runs locally that looks something like:</p>\n<pre><code class=\"language-javascript\">describe('sticky header and breadcrumbs', () => {\n  beforeEach(() => {\n    cy.visit('/#/popup-next')\n    cy.get('.expression-editor-popup-next').eq(0).as('popup')\n  })\n\n  it('has sticky header when source is expanded (not scrolled yet)', () => {\n    cy.get('@popup').within(() => {\n      cy.get('.expression-editor-popup-next__entity--stuck').within(() => {\n        cy.get('.expression-editor-popup-next__source-heading-title').should(\n          'have.attr',\n          'title',\n          'Workday / Operation / Operation'\n        )\n        const titleParts = cy.get(\n          '.expression-editor-popup-next__source-heading-title-part'\n        )\n        titleParts.should('have.length', 3)\n        titleParts.eq(0).should('have.text', 'Workday')\n        titleParts.eq(1).should('have.text', 'Operation')\n        titleParts.eq(2).should('have.text', 'Operation')\n      })\n    })\n  })\n})\n</code></pre>\n<p>The actual behaviour being tested here isn't particularly important. The gist of it is that we're navigating to the popup demo page, finding the first popup and testing that the sticky header is displaying the correct information.</p>\n<p>Our automated build runs and the test fails. One nice thing about Cypress is it can output videos or screenshots of your tests runs at the point of failure. So I go to the build system to take a look, and...</p>\n<figure>\n  <img src='/assets/blog/bye-bye-popups/missing-popups.png' alt=\"What happened to our popups?!\"/>\n  <figcaption>What happened to our popups?!</figcaption>\n</figure>\n<p>They're all gone! Ok. We can work with that. At least it makes sense why the test is failing. Now to recreate locally.</p>\n<p>...and of course it passes.</p>\n<p>At this point, we're not too concerned. Everyone that's worked in software knows these things happen every day. A package updates and breaks some of your behaviour. No big deal, that's what the tests are for. And until the tests are passing nothing will get pushed to production anyway.</p>\n<p>Eventually (like 2 hours later) we track it down to a newer version of Chrome (90) being installed on the CI. Updating Chrome locally now shows the behaviour as well. Unfortunately, it's not just limited to tests or our demo environment. It's happening everywhere.</p>\n<p>Including production.</p>\n<h2>Some history</h2>\n<p>The product I was working on at the time began life as an AngularJS application. This is a particularly common story for most products written 5 or 6 years ago. AngularJS was a well-established framework, and React's terms of use <a href=\"https://medium.com/bits-and-pixels/a-compelling-reason-not-to-use-reactjs-beac24402f7b\">left a lot to be desired</a>.</p>\n<p>Fast forward a couple of years and the growth of React, coupled with the impending <a href=\"https://blog.angular.io/stable-angularjs-and-long-term-support-7e077635ee9c\">end of AngularJS's LTS</a>, meant a migration plan was needed. Enter <a href=\"https://www.npmjs.com/package/react2angular\"><code>react2angular</code></a>. This allowed for a gradual transition of the components to React implementations.</p>\n<p>The process looked something like:</p>\n<ul>\n<li>pick a component with no dependencies on other AngularJS components</li>\n<li>create a new like-for-like React implementation</li>\n<li>replace the definition of the AngularJS component with the new React implementation</li>\n<li>move up the component tree and repeat</li>\n</ul>\n<p>Eventually, you reach the top of the component tree and can convert the whole application. In places that haven't been completely converted yet, there might be some code that looks like:</p>\n<pre><code class=\"language-javascript\">import Popup from '../react/popup/popup'\nexport default angular.module('uimapper')\n  ...\n  .component('popup', react2angular(Popup))\n</code></pre>\n<p>This shows the definition an AngularJS component, <code>popup</code>, using <code>react2angular</code> to alias that component to the newer React implementation.</p>\n<p>So why does any of this matter?</p>\n<h2>Naming conventions are more important</h2>\n<p>Well, for anyone that's unfamiliar with AngularJS, this will then be inserted into the DOM as <code>&#x3C;popup></code>.</p>\n<p>Tucked away in the changes for Chrome 90 was <a href=\"https://chromium.googlesource.com/chromium/src/+/2024c426de3346666cb45f9c65ad9dec2246be99\">this commit.</a> After some googling, it turns out <a href=\"https://www.chromestatus.com/feature/5463833265045504\">Chrome is starting to implement a native <code>&#x3C;popup></code> element.</a> In doing so, they've added some new styles to the Chrome style sheet to handle the display of this element.</p>\n<figure>\n  <img src='/assets/blog/bye-bye-popups/popup-style.png' alt=\"The offending style.\"/>\n  <figcaption>Some helpful new styles.</figcaption>\n</figure>\n<p>At this point, cogs are finally starting to turn. Remember our component from earlier? What did we call it?</p>\n<blockquote>\n<p><code>popup</code></p>\n</blockquote>\n<p>We're fucking idiots. A short rename later, and we're back in business:</p>\n<figure>\n  <img src='/assets/blog/bye-bye-popups/popups-demo-page.png' alt=\"What the demo page should look like.\"/>\n  <figcaption>What the demo page should look like.</figcaption>\n</figure>\n<h2>Takeaways</h2>\n<p>There's now a <a href=\"https://support.google.com/chrome/thread/106244569/chrome-90-hides-my-websites-popup-dialogs-interial-popup-open?hl=en\">helpful support issue</a> discussing the problem, where it's pointed out that the <a href=\"https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name\">HTML spec requires that custom elements include a <code>-</code>.</a> And, of course, they're right. Never create custom elements without including a <code>-</code> in the name!</p>\n<p>That didn't make it any less annoying to figure out at the time.</p>\n","coverImage":"/assets/blog/bye-bye-popups/popups-demo-page.png","date":"2021-06-11T17:00:07.322Z","excerpt":"For about 5 hours, our custom popups completely disappeared. Here's how Google ruined my day.","slug":"bye-bye-popups","tags":["javascript","angularjs","cypress","chrome"],"title":"Bye bye popups"}},"__N_SSG":true}