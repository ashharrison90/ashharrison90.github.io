{"pageProps":{"allPosts":[{"content":"\n## End to end tests are important\n\nAt the time, we used [Cypress](https://www.cypress.io/) for our end-to-end tests. We have a test that runs locally that looks something like:\n\n```javascript\ndescribe('sticky header and breadcrumbs', () => {\n  beforeEach(() => {\n    cy.visit('/#/popup-next')\n    cy.get('.expression-editor-popup-next').eq(0).as('popup')\n  })\n\n  it('has sticky header when source is expanded (not scrolled yet)', () => {\n    cy.get('@popup').within(() => {\n      cy.get('.expression-editor-popup-next__entity--stuck').within(() => {\n        cy.get('.expression-editor-popup-next__source-heading-title').should(\n          'have.attr',\n          'title',\n          'Workday / Operation / Operation'\n        )\n        const titleParts = cy.get(\n          '.expression-editor-popup-next__source-heading-title-part'\n        )\n        titleParts.should('have.length', 3)\n        titleParts.eq(0).should('have.text', 'Workday')\n        titleParts.eq(1).should('have.text', 'Operation')\n        titleParts.eq(2).should('have.text', 'Operation')\n      })\n    })\n  })\n})\n```\n\nThe actual behaviour being tested here isn't particularly important. The gist of it is that we're navigating to the popup demo page, finding the first popup and testing that the sticky header is displaying the correct information.\n\nOur automated build runs and the test fails. One nice thing about Cypress is it can output videos or screenshots of your tests runs at the point of failure. So I go to the build system to take a look, and...\n\n<figure>\n  <img src='/assets/blog/bye-bye-popups/missing-popups.webp' alt=\"What happened to our popups?!\"/>\n  <figcaption>What happened to our popups?!</figcaption>\n</figure>\n\nThey're all gone! Ok. We can work with that. At least it makes sense why the test is failing. Now to recreate locally.\n\n...and of course it passes.\n\nAt this point, we're not too concerned. Everyone that's worked in software knows these things happen every day. A package updates and breaks some of your behaviour. No big deal, that's what the tests are for. And until the tests are passing nothing will get pushed to production anyway.\n\nEventually (like 2 hours later) we track it down to a newer version of Chrome (90) being installed on the CI. Updating Chrome locally now shows the behaviour as well. Unfortunately, it's not just limited to tests or our demo environment. It's happening everywhere.\n\nIncluding production.\n\n## Some history\n\nThe product I was working on at the time began life as an AngularJS application. This is a particularly common story for most products written 5 or 6 years ago. AngularJS was a well-established framework, and React's terms of use [left a lot to be desired](https://medium.com/bits-and-pixels/a-compelling-reason-not-to-use-reactjs-beac24402f7b).\n\nFast forward a couple of years and the growth of React, coupled with the impending [end of AngularJS's LTS](https://blog.angular.io/stable-angularjs-and-long-term-support-7e077635ee9c), meant a migration plan was needed. Enter [`react2angular`](https://www.npmjs.com/package/react2angular). This allowed for a gradual transition of the components to React implementations.\n\nThe process looked something like:\n\n- pick a component with no dependencies on other AngularJS components\n- create a new like-for-like React implementation\n- replace the definition of the AngularJS component with the new React implementation\n- move up the component tree and repeat\n\nEventually, you reach the top of the component tree and can convert the whole application. In places that haven't been completely converted yet, there might be some code that looks like:\n\n```javascript\nimport Popup from '../react/popup/popup'\nexport default angular.module('uimapper')\n  ...\n  .component('popup', react2angular(Popup))\n```\n\nThis shows the definition an AngularJS component, `popup`, using `react2angular` to alias that component to the newer React implementation.\n\nSo why does any of this matter?\n\n## Naming conventions are more important\n\nWell, for anyone that's unfamiliar with AngularJS, this will then be inserted into the DOM as `<popup>`.\n\nTucked away in the changes for Chrome 90 was [this commit.](https://chromium.googlesource.com/chromium/src/+/2024c426de3346666cb45f9c65ad9dec2246be99) After some googling, it turns out [Chrome is starting to implement a native `<popup>` element.](https://www.chromestatus.com/feature/5463833265045504) In doing so, they've added some new styles to the Chrome style sheet to handle the display of this element.\n\n<figure>\n  <img src='/assets/blog/bye-bye-popups/popup-style.webp' alt=\"The offending style.\"/>\n  <figcaption>Some helpful new styles.</figcaption>\n</figure>\n\nAt this point, cogs are finally starting to turn. Remember our component from earlier? What did we call it?\n\n> `popup`\n\nWe're fucking idiots. A short rename later, and we're back in business:\n\n<figure>\n  <img src='/assets/blog/bye-bye-popups/popups-demo-page.webp' alt=\"What the demo page should look like.\"/>\n  <figcaption>What the demo page should look like.</figcaption>\n</figure>\n\n## Takeaways\n\nThere's now a [helpful support issue](https://support.google.com/chrome/thread/106244569/chrome-90-hides-my-websites-popup-dialogs-interial-popup-open?hl=en) discussing the problem, where it's pointed out that the [HTML spec requires that custom elements include a `-`.](https://html.spec.whatwg.org/multipage/custom-elements.html#valid-custom-element-name) And, of course, they're right. Never create custom elements without including a `-` in the name!\n\nThat didn't make it any less annoying to figure out at the time.\n","coverImage":"/assets/blog/bye-bye-popups/popups-demo-page.webp","date":"2021-06-11T17:00:07.322Z","excerpt":"For about 5 hours, our custom popups completely disappeared. Here's how Google ruined my day.","slug":"bye-bye-popups","tags":["javascript","angularjs","cypress","chrome"],"title":"Bye bye popups"},{"content":"\n## Why?\n\n**Narcissism.**\n\nActually, the motivations for building this site are hopefully relatable.\n\nWorking on the same internal copyrighted project for a few years was starting to stifle my experience with other languages, frameworks, build tools, etc. Having recently gone through a round of interviews at various companies, two issues kept cropping up: a lack of TypeScript experience and a lack of publically available code examples.\n\nSo, some basic requirements to attempt to address that. This site should:\n\n- be written in TypeScript\n- use some new bootstrap (i.e. not Create React App)\n- should have a mobile first design\n- function as a place to demonstrate **production quality** code\n\nI'll probably regret that last point.\n\n## Implementation\n\nAs with most blogs or portfolio sites, there isn't really a need for a backend server to be running to dynamically generate pages. The content lends itself to being statically generated.\n\nThis has a couple of advantages:\n\n1. It's **fast**. Being statically generated means that all we're serving up to the end user is the exact same chunk of html and javascript every time. This allows for improved caching, and faster load times as a result.\n1. It's **cheap**. Not having to run a backend server reduces costs dramatically. This site is currently hosted using [GitHub Pages](https://pages.github.com/) for free.\n\nIn terms of static site generators, there are [quite a few options](https://jamstack.org/generators). However, after deciding to stick with React, it starts to become a bit of a two horse race between [Next.js](https://nextjs.org/) and [Gatsby](https://www.gatsbyjs.com/).\n\nI ended up choosing Next.js, primarily because of it's flexibility. Whilst Gatsby is designed purely as a static site generator, the main focus of Next.js is server side rendering. It just so happens to _also_ offer static site generation.\n\n<figure>\n  <img src='/assets/blog/building-this-site/people-using-next.webp' alt=\"Lots of companies are starting to adopt Next.js\"/>\n  <figcaption>Lots of companies are starting to adopt Next.js</figcaption>\n</figure>\n\nSo if this site ever evolves to the point where it needs a dynamic backend, it can! At the same time, I also gain experience with a framework that a lot of companies are now using. Win-win.\n\n## Design\n\nDidn't have one.\n\nThis will probably come as no surprise to anyone, but I'm not a designer. I ended up playing around with most things in the browser until I was happy. The optimal solution is probably to use wireframes up front.\n\nThe only thing I'm not quite happy with is the card design for each post. But that's ok - it's good enough for now, and I'm sure it'll be tweaked in the future.\n\n<figure>\n  <img src='/assets/blog/building-this-site/card-design.webp' alt=\"The current card design.\"/>\n  <figcaption>The current card design.</figcaption>\n</figure>\n\n## Colours\n\nOne thing I wanted for the site was a theme toggle or dark mode toggle. There are [various benefits](https://blog.weekdone.com/why-you-should-switch-on-dark-mode/) to this, but I find the biggest one is that it forces you to pare back and structure your styles properly. Simplicity is key. A few different background shades, a couple of choices for text, a splash of colour for interactive elements, etc.\n\nWhat I've ended up with is a `globals.scss` file at the root of the project that looks something like:\n\n```scss\n:root[data-theme='light'] {\n  --background: #fff;\n  --border: #e0e0e0;\n  --card-brightness: 5;\n  --container: #f4f4f4;\n  --container-alt: #a8a8a8;\n  --container--rgb: 244, 244, 244;\n  --interactive: #0f9bfe;\n  --hero-background-rgb: 0, 0, 0;\n  --hero-text-primary: #fff;\n  --icon-primary: #000;\n  --icon-secondary: #525252;\n  --logo-durham-primary: #002337;\n  --logo-durham-secondary: #702567;\n  --logo-ibm: #1f70c1;\n  --logo-qinetiq: #002744;\n  --text-primary: #000;\n  --text-secondary: #525252;\n}\n\n:root[data-theme='dark'] {\n  --background: #262626;\n  --border: #525252;\n  --card-brightness: 0.6;\n  --container: #393939;\n  --container-alt: #6f6f6f;\n  --container--rgb: 57, 57, 57;\n  --interactive: #60bdff;\n  --hero-background-rgb: 244, 244, 244;\n  --hero-text-primary: #262626;\n  --icon-primary: #f4f4f4;\n  --icon-secondary: #c6c6c6;\n  --logo-durham-primary: #f4f4f4;\n  --logo-durham-secondary: #f4f4f4;\n  --logo-ibm: #1f70c1;\n  --logo-qinetiq: #f4f4f4;\n  --text-primary: #f4f4f4;\n  --text-secondary: #c6c6c6;\n}\n```\n\nThis is nice as it makes changes to the theme extremely easy. In less than a minute I can change the site from a fairly muted modern colour palette to a kaleidoscopic nightmare.\n\n<figure>\n  <img src='/assets/blog/building-this-site/kaleidoscopic-nightmare.webp' alt=\"A kaleidoscopic nightmare.\"/>\n  <figcaption>A kaleidoscopic nightmare.</figcaption>\n</figure>\n\nOriginally I was intending to use a CSS-in-JS library, something like [styled components](https://styled-components.com/) or [Emotion](https://emotion.sh/docs/introduction). But Next.js [supports css modules](https://nextjs.org/docs/basic-features/built-in-css-support#adding-component-level-css) out of the box, so I've stuck with that and been pleasantly suprised.\n\n## Next steps\n\nThere's a few things I haven't gotten to yet.\n\nFirstly, testing. Turns out it's very easy to postpone testing when there's no real requirement and only one person working on the code. Who knew?\n\n<figure>\n  <img src='/assets/blog/building-this-site/no-tests.webp' alt=\"Whoops!\"/>\n  <figcaption>Whoops!</figcaption>\n</figure>\n\nNevertheless, I'm still committed to adding tests. In the real world, good tests are one of the most important aspects of a project. I'm also going to use it as an opportunity to experiment with some more new frameworks I haven't had chance to use yet, e.g. [Playwright](https://playwright.dev/) instead of [Cypress](https://www.cypress.io/).\n\nSecondly, performance and SEO. Given how lightweight the site currently is, I don't foresee many problems. But it's just an excuse to play around with [Lighthouse](https://developers.google.com/web/tools/lighthouse) a bit more.\n\nAnd finally, grab myself a nice domain to host it on! Although that might mean [a lot of searching](https://domains.google.com/registrar/search?searchTerm=ash&tab=1).\n\n## Code\n\nIf you're curious about anything, feel free to check it all out on [GitHub](https://github.com/ashharrison90/ashharrison90.github.io).\n","coverImage":"/assets/blog/building-this-site/code.webp","date":"2021-05-09T15:40:07.322Z","excerpt":"I had a week's holiday and decided to finally build the site I've been telling myself I'll do for the last 6 years.","slug":"building-this-site","tags":["javascript","typescript","react","nextjs","design"],"title":"Building this site"}]},"__N_SSG":true}